 <script>
 //Q1. What is a function decleartion
    function square(num){
        return num * num;
    }

    console.log(square(2))

    //Q2. What is a function expression
   // The idea that a function is stored inside a variable
   const square = function(a){
    return a * a;
   }
   console.log(square(3))

   //Q3. What are first class fxns?
    //Ans.
    // Fxns that can be passed as variables
    // Fxns that can be passed as arguments to other fxns
    function square(num){
        return num * num;
    }

    function displaySqyare(fn){
        console.log(`Square is ${fn(5)}`)
    }
displaySqyare(square);

  //Q4. What is IIFE?
    // A function that is executed immediately
(function square(num){
    console.log(num * num)
})(5)

//Q5. Output based IIFE Question
    // A function that is executed immediately
(function (x){
    return (function (y){
        console.log(x);
    })(2);
})(1)
// The ability of a fxn to access variables and fxns
//that are lexically out of its scope is called closure


 //Q6. What is a function scope?

    var num1 = 20;
    num2 = 3;
    name = "Roadside Coder";

    function multiply(){
        return num1 * num2;
    }

    console.log(multiply()); // Return 60

    function getScore(){
        var num1 = 2; //Shadow the global scope variables
        num2 = 3; //Shadow the global scope variables

        function add(){
        return `${name} score ${num1 + num2}`;
    }
    return add();
    }

    console.log(getScore()); 


//Q7. Output based question on Function scope

   for (let i = 0; i < 5; i++){
    setTimeout(function (){
        console.log(i);
    }, i * 1000);
   }

   for (var j = 0; j < 5; j++){
    setTimeout(function (){
        console.log(j);
    }, j * 1000);
   }
    

    //Q8. Function Hoisting
  functionName();
  function functionName(){
    console.log("Roadside Coder");
  }
    //This shows that functions are hoisted completely

//Q9. Output based question on Function Hoisting 13:50-15:44
   var x = 21;
   var fun = function () {
    console.log(x);
    var x = 20;
   };
   fun();
 

 //Q 10.1 Param Vs Arguments
  function square(num){
    console.log( num * num);
  }
  square(5) //Argument
  //10.2 Spread Vs Rest operator
  //10.2.1 Spread operator

  function multiply(num1, num2){
    console.log(num1 * num2);
  }

  var arr = [5, 6]

  multiply(...arr); //spread

   //10.2.2 Rest operator
function multiPly(...num){
    console.log(num[0] * num[1]);
}

var arr1 = [2, 3];
multiPly(...arr1)


//Q 11.1 Output interview on spread and rest operator 15:44-19:00
  //What is the output?
  /*const fn = (a, ...numbers, x, y) => {
    console.log(x, y);
  }

  fn(5, 6, 3, 7); */

  //Uncaught SyntaxError: Rest parameter must be last formal parameter
  //Corrected
//11.2
  const fxn = (a, x, y, ...nums) => {
    console.log(x, y);
  }

  fxn(10, 12, 6, 14);

    //Q 12 What is a callback function? 19:00-

  function greeting(name){
    alert(`Hello ${name}`)
  }

  function processUserInput(callback){
    var name = prompt(`please enter your name.`);
    callback(name);
  }
  processUserInput(greeting); //the name entered in the fxn greeting..
  
   //Q13. What is and arrow function 20:57-25:00

  const fn = a => a * a
  console.log(fn(3))

  const add = (firstName, secondName) => firstName + secondName;
  console.log(`Ibrahim, Salieu`);

  let user = {
    username: `Roadside coder`,
    rc1(){  //Pointing to the user.username object
        console.log(`Subscribe to ${this.username}`);
    },
    rc2: () => { //pointing to the global object
        username: `Roadside Coder`;
        console.log(`Subscribe to ${this.username}`);
    } 
  };
user.rc1();
user.rc2();
//Closure in JavaScript
    //Q14 What is lexical scope? 25:50-
    var name = `RoadsideCoder`;
    function local(){
        console.log(`name`);
    }
    local();

    function subscribe(){
        function displayName(){
            alert(name);
        }
        displayName();
    }

    subscribe();

    function makeFunc(){
        var name = "Mozilla";
        function displayName(){
            console.log(name);
        }
        return displayName;
    }
    var myFunc = makeFunc();
    myFunc();

   


   </script>